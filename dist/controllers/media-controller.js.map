{"version":3,"sources":["../../controllers/media-controller.js"],"names":["db","require","HttpStatus","formidable","fs","moment","constants","exports","fetchMedia","req","res","userId","params","mediaId","query","error","results","fields","status","BAD_REQUEST","send","getStatusText","OK","media","message","uploadMedia","form","IncomingForm","userDir","userUploadDirectory","uploadDir","keepExtensions","existsSync","mkdirSync","parse","err","files","dateUploaded","format","file","name","path","size","type","console","log","INTERNAL_SERVER_ERROR","id","insertId"],"mappings":"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","file":"media-controller.js","sourcesContent":["const db = require('../dbconnection'),\n    HttpStatus = require('http-status-codes'),\n    formidable = require('formidable'),\n    fs = require('fs'),\n    moment = require('moment'),\n    constants = require('../util/constants');\n\nexports.fetchMedia = function(req, res) {\n    const userId = req.params.userId,\n        mediaId = req.params.mediaId;\n\n    if (userId) {\n        if (mediaId) {\n            db.query(\"Select * from uploaded_media where user_id = \" + userId + \" and id = \" + mediaId, function(error, results, fields) {\n                if (error) {\n                    return res\n                        .status(HttpStatus.BAD_REQUEST)\n                        .send({error: HttpStatus.getStatusText(HttpStatus.BAD_REQUEST)});\n                }\n                return res\n                    .status(HttpStatus.OK)\n                    .send({media: results, message: \"single file\"});\n            });\n        }\n        else {\n            db.query(\"Select * from uploaded_media where user_id = \" + userId, function(error, results, fields) {\n                if (error) {\n                    return res\n                        .status(HttpStatus.BAD_REQUEST)\n                        .send({error: HttpStatus.getStatusText(HttpStatus.BAD_REQUEST)});\n                }\n                return res\n                    .status(HttpStatus.OK)\n                    .send({media: results, message: \"all media\"});\n            });\n        }\n    }\n    else {\n        return res\n            .status(HttpStatus.BAD_REQUEST)\n            .send({error: HttpStatus.getStatusText(HttpStatus.BAD_REQUEST)});\n    }\n\n};\n\nexports.uploadMedia = function(req, res) {\n    const userId = req.params.userId;\n\n    if (userId) {\n        const form = new formidable.IncomingForm(),\n            userDir = constants.userUploadDirectory + userId + \"/\";\n\n\n        form.uploadDir = userDir;\n        form.keepExtensions = true;\n\n        // TODO: Make this async\n        if (!fs.existsSync(userDir)) {\n            fs.mkdirSync(userDir);\n        }\n\n        form.parse(req, function(err, fields, files) {\n\n            if (err) {\n                return res\n                    .status(HttpStatus.BAD_REQUEST)\n                    .send({error: HttpStatus.getStatusText(HttpStatus.BAD_REQUEST)});\n            }\n            else {\n                const dateUploaded =  moment().format('YYYY-MM-DD'),\n                    query = `insert into uploaded_media (user_id, name, filepath, size, type, date_uploaded) \\\n                    values (${userId}, '${files.file.name}', '${files.file.path}', ${files.file.size}, '${files.file.type}', '${dateUploaded}')`;\n\n                db.query(query, function(error, results, fields) {\n                    if (error) {\n                        console.log(error);\n                        return res\n                            .status(HttpStatus.INTERNAL_SERVER_ERROR)\n                            .send({error: HttpStatus.getStatusText(HttpStatus.INTERNAL_SERVER_ERROR)});\n                    }\n                    return res\n                        .status(HttpStatus.OK)\n                        .send({id: results.insertId, name: files.file.name, size: files.file.size, dateUploaded: dateUploaded});\n                });\n            }\n\n        });\n    }\n    else {\n        return res\n            .status(HttpStatus.BAD_REQUEST)\n            .send({error: HttpStatus.getStatusText(HttpStatus.BAD_REQUEST)});\n    }\n\n};"]}